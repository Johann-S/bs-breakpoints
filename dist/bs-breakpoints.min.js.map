{"version":3,"file":"bs-breakpoints.min.js","sources":["../src/polyfill.js","../src/index.js","../src/utility.js"],"sourcesContent":["(() => {\n  // Add polyfill for Custom Events\n  function CustomEvent (ev, params) {\n    const evt = document.createEvent('CustomEvent')\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\n    evt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail)\n    return evt\n  }\n\n  if (typeof window.CustomEvent !== 'function') {\n    CustomEvent.prototype = window.Event.prototype\n    window.CustomEvent = CustomEvent\n  }\n})()\n","import './polyfill'\r\nimport { getBreakpointsCssProps } from './utility'\r\n\r\nconst defaultBreakPoints = {\r\n  xSmall: {\r\n    min: 0,\r\n    max: 575\r\n  },\r\n  small: {\r\n    min: 576,\r\n    max: 767\r\n  },\r\n  medium: {\r\n    min: 768,\r\n    max: 991\r\n  },\r\n  large: {\r\n    min: 992,\r\n    max: 1199\r\n  },\r\n  xLarge: {\r\n    min: 1200,\r\n    max: Infinity\r\n  }\r\n}\r\n\r\nlet breakPoints = {}\r\n\r\n// Backward compatibility: default breakpoints naming\r\nconst nameMapping = {\r\n  xs: 'xSmall',\r\n  sm: 'small',\r\n  md: 'medium',\r\n  lg: 'large',\r\n  xl: 'xLarge'\r\n}\r\n\r\nlet breakPointsDetected = false\r\nlet currentBreakpoint = null\r\n\r\nconst Events = {\r\n  INIT: 'init.bs.breakpoint',\r\n  NEW: 'new.bs.breakpoint'\r\n}\r\n\r\nconst getJQuery = () => window.jQuery\r\n\r\nconst getPropsValue = () => {\r\n  return getBreakpointsCssProps().map((prop) => {\r\n    return {\r\n      name: prop.replace('--breakpoint-', ''),\r\n      value: parseInt(\r\n        window\r\n          .getComputedStyle(document.documentElement)\r\n          .getPropertyValue(prop),\r\n        10\r\n      )\r\n    }\r\n  })\r\n}\r\n\r\nconst getBreakPoints = () => {\r\n  // get breakpoints from Bootstrap CSS variables\r\n  const propsVal = getPropsValue()\r\n\r\n  if (propsVal.length) {\r\n    for (const bp in propsVal) {\r\n      const key = nameMapping[propsVal[bp].name]\r\n        ? nameMapping[propsVal[bp].name]\r\n        : propsVal[bp].name\r\n      const nextItem = parseInt(bp) + 1\r\n      key in breakPoints || (breakPoints[key] = {})\r\n      // update Breakpoints\r\n      breakPoints[key].min = propsVal[bp].value\r\n      breakPoints[key].max = propsVal[nextItem]\r\n        ? propsVal[nextItem].value - 1\r\n        : Infinity\r\n    }\r\n  } else {\r\n    // If there are no css variables get the default breakpoints\r\n    breakPoints = defaultBreakPoints\r\n  }\r\n\r\n  breakPointsDetected = true\r\n}\r\n\r\nconst _detectBreakPoint = () => {\r\n  const widthWindow = Math.max(\r\n    document.documentElement.clientWidth,\r\n    window.innerWidth || 0\r\n  )\r\n\r\n  for (const key in breakPoints) {\r\n    if (\r\n      widthWindow <= breakPoints[key].max &&\r\n      widthWindow >= breakPoints[key].min\r\n    ) {\r\n      return key\r\n    }\r\n  }\r\n\r\n  return currentBreakpoint\r\n}\r\n\r\nconst dispatchBreakpoint = (breakPointKey, eventName = Events.NEW) => {\r\n  if (!currentBreakpoint || currentBreakpoint !== breakPointKey) {\r\n    currentBreakpoint = breakPointKey\r\n    const $ = getJQuery()\r\n\r\n    if ($) {\r\n      const $event = $.Event(eventName, {\r\n        breakpoint: breakPointKey\r\n      })\r\n\r\n      $(window).trigger($event)\r\n    } else {\r\n      const event = new window.CustomEvent(eventName, {\r\n        detail: breakPointKey\r\n      })\r\n\r\n      window.dispatchEvent(event)\r\n    }\r\n  }\r\n}\r\n\r\nconst bsBreakpoints = {\r\n  init () {\r\n    getBreakPoints()\r\n    dispatchBreakpoint(_detectBreakPoint(), Events.INIT)\r\n\r\n    window.addEventListener('resize', () => {\r\n      dispatchBreakpoint(_detectBreakPoint())\r\n    })\r\n  },\r\n\r\n  detectBreakpoint () {\r\n    if (!breakPointsDetected) {\r\n      getBreakPoints()\r\n    }\r\n\r\n    currentBreakpoint = _detectBreakPoint()\r\n    return currentBreakpoint\r\n  },\r\n\r\n  getCurrentBreakpoint () {\r\n    return currentBreakpoint\r\n  }\r\n}\r\n\r\nexport default bsBreakpoints\r\n","const getBreakpointsCssProps = () => {\n  return Array.from(document.styleSheets)\n    .filter(\n      sheet =>\n        sheet.href === null || sheet.href.startsWith(window.location.origin)\n    )\n    .reduce(\n      (acc, sheet) =>\n        (acc = [\n          ...acc,\n          ...Array.from(sheet.cssRules).reduce(\n            (def, rule) =>\n              (def =\n              rule.selectorText === ':root'\n                ? [\n                  ...def,\n                  ...Array.from(rule.style).filter(name =>\n                    name.startsWith('--breakpoint')\n                  )\n                ]\n                : def),\n            []\n          )\n        ]),\n      []\n    )\n}\n\nexport { getBreakpointsCssProps }\n"],"names":["CustomEvent","ev","params","evt","document","createEvent","bubbles","cancelable","detail","undefined","initCustomEvent","window","prototype","Event","getPropsValue","Array","from","styleSheets","filter","sheet","href","startsWith","location","origin","reduce","acc","cssRules","def","rule","selectorText","style","name","map","prop","replace","value","parseInt","getComputedStyle","documentElement","getPropertyValue","getBreakPoints","propsVal","length","bp","key","nameMapping","nextItem","breakPoints","min","max","Infinity","defaultBreakPoints","breakPointsDetected","_detectBreakPoint","widthWindow","Math","clientWidth","innerWidth","currentBreakpoint","dispatchBreakpoint","breakPointKey","eventName","$","$event","Events","jQuery","breakpoint","trigger","event","dispatchEvent","xSmall","small","medium","large","xLarge","xs","sm","md","lg","xl","init","addEventListener","detectBreakpoint","getCurrentBreakpoint"],"mappings":";;;;;sPAEWA,EAAaC,EAAIC,OAClBC,EAAMC,SAASC,YAAY,sBACjCH,EAASA,GAAU,CAAEI,SAAS,EAAOC,YAAY,EAAOC,YAAQC,GAChEN,EAAIO,gBAAgBT,EAAIC,EAAOI,QAASJ,EAAOK,WAAYL,EAAOM,QAC3DL,EAGyB,mBAAvBQ,OAAOX,cAChBA,EAAYY,UAAYD,OAAOE,MAAMD,UACrCD,OAAOX,YAAcA,GCoCH,SAAhBc,WC9CGC,MAAMC,KAAKZ,SAASa,aACxBC,OACC,SAAAC,UACiB,OAAfA,EAAMC,MAAiBD,EAAMC,KAAKC,WAAWV,OAAOW,SAASC,UAEhEC,OACC,SAACC,EAAKN,mBAECM,EACAV,MAAMC,KAAKG,EAAMO,UAAUF,OAC5B,SAACG,EAAKC,SAEkB,UAAtBA,EAAKC,uBAEEF,EACAZ,MAAMC,KAAKY,EAAKE,OAAOZ,OAAO,SAAAa,UAC/BA,EAAKV,WAAW,mBAGlBM,GACN,MAGN,IDwB4BK,IAAI,SAACC,SAC5B,CACLF,KAAME,EAAKC,QAAQ,gBAAiB,IACpCC,MAAOC,SACLzB,OACG0B,iBAAiBjC,SAASkC,iBAC1BC,iBAAiBN,GACpB,OAMe,SAAjBO,QAEEC,EAAW3B,OAEb2B,EAASC,WACN,IAAMC,KAAMF,EAAU,KACnBG,EAAMC,EAAYJ,EAASE,GAAIZ,OAEjCU,EAASE,GAAIZ,KACXe,EAAWV,SAASO,GAAM,EAChCC,KAAOG,IAAgBA,EAAYH,GAAO,IAE1CG,EAAYH,GAAKI,IAAMP,EAASE,GAAIR,MACpCY,EAAYH,GAAKK,IAAMR,EAASK,GAC5BL,EAASK,GAAUX,MAAQ,EAC3Be,EAAAA,OAINH,EAAcI,EAGhBC,GAAsB,EAGE,SAApBC,QAMOT,EALLU,EAAcC,KAAKN,IACvB7C,SAASkC,gBAAgBkB,YACzB7C,OAAO8C,YAAc,OAGZb,KAAOG,KAEdO,GAAeP,EAAYH,GAAKK,KAChCK,GAAeP,EAAYH,GAAKI,WAEzBJ,SAIJc,EAGkB,SAArBC,EAAsBC,EAAeC,OAGjCC,EAGEC,WAN+BF,IAAAA,EAAYG,GAChDN,GAAqBA,IAAsBE,IAC9CF,EAAoBE,GACdE,EA9DcnD,OAAOsD,SAiEnBF,EAASD,EAAEjD,MAAMgD,EAAW,CAChCK,WAAYN,IAGdE,EAAEnD,QAAQwD,QAAQJ,KAEZK,EAAQ,IAAIzD,OAAOX,YAAY6D,EAAW,CAC9CrD,OAAQoD,IAGVjD,OAAO0D,cAAcD,KCxH3B,IDGMjB,EAAqB,CACzBmB,OAAQ,CACNtB,IAAK,EACLC,IAAK,KAEPsB,MAAO,CACLvB,IAAK,IACLC,IAAK,KAEPuB,OAAQ,CACNxB,IAAK,IACLC,IAAK,KAEPwB,MAAO,CACLzB,IAAK,IACLC,IAAK,MAEPyB,OAAQ,CACN1B,IAAK,KACLC,IAAKC,EAAAA,IAILH,EAAc,GAGZF,EAAc,CAClB8B,GAAI,SACJC,GAAI,QACJC,GAAI,SACJC,GAAI,QACJC,GAAI,UAGF3B,GAAsB,EACtBM,EAAoB,KAElBM,EACE,qBADFA,EAEC,0BAmFe,CACpBgB,gBACExC,IACAmB,EAAmBN,IAAqBW,GAExCrD,OAAOsE,iBAAiB,SAAU,WAChCtB,EAAmBN,QAIvB6B,mCACO9B,GACHZ,IAGFkB,EAAoBL,KAItB8B,uCACSzB"}