{"version":3,"file":"bs-breakpoints.min.js","sources":["../src/polyfill.js","../src/index.js"],"sourcesContent":["(() => {\n  // Add polyfill for Custom Events\n  function CustomEvent (ev, params) {\n    const evt = document.createEvent('CustomEvent')\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\n    evt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail)\n    return evt\n  }\n\n  if (typeof window.CustomEvent !== 'function') {\n    CustomEvent.prototype = window.Event.prototype\n    window.CustomEvent = CustomEvent\n  }\n})()\n","import './polyfill'\n\nconst breakPoints = {\n  xSmall: {\n    min: 0,\n    max: 575\n  },\n  small: {\n    min: 576,\n    max: 767\n  },\n  medium: {\n    min: 768,\n    max: 991\n  },\n  large: {\n    min: 992,\n    max: 1199\n  },\n  xLarge: {\n    min: 1200,\n    max: Infinity\n  }\n}\n\nlet currentBreakpoint = null\n\nconst Events = {\n  INIT: 'init.bs.breakpoint',\n  NEW: 'new.bs.breakpoint'\n}\n\nconst getJQuery = () => window.$ || window.jQuery\n\nconst _detectBreakPoint = () => {\n  const widthWindow = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\n\n  for (const key in breakPoints) {\n    if (widthWindow < breakPoints[key].max && widthWindow >= breakPoints[key].min) {\n      return key\n    }\n  }\n\n  return currentBreakpoint\n}\n\nconst dispatchBreakpoint = (breakPointKey, eventName = Events.NEW) => {\n  if (currentBreakpoint === null || currentBreakpoint !== breakPointKey) {\n    currentBreakpoint = breakPointKey\n    const $ = getJQuery()\n\n    if ($) {\n      const $event = $.Event(eventName, {\n        breakpoint: breakPointKey\n      })\n\n      $(window).trigger($event)\n    } else {\n      const event = new window.CustomEvent(eventName, {\n        detail: breakPointKey\n      })\n\n      window.dispatchEvent(event)\n    }\n  }\n}\n\nconst bsBreakpoints = {\n  init () {\n    dispatchBreakpoint(_detectBreakPoint(), Events.INIT)\n\n    window.addEventListener('resize', () => {\n      dispatchBreakpoint(_detectBreakPoint())\n    })\n  },\n\n  detectBreakpoint () {\n    currentBreakpoint = _detectBreakPoint()\n    return currentBreakpoint\n  },\n\n  getCurrentBreakpoint () {\n    return currentBreakpoint\n  }\n}\n\nexport default bsBreakpoints\n"],"names":["CustomEvent","ev","params","evt","document","createEvent","bubbles","cancelable","detail","undefined","initCustomEvent","window","prototype","Event","breakPoints","xSmall","min","max","small","medium","large","xLarge","Infinity","currentBreakpoint","Events","_detectBreakPoint","widthWindow","Math","documentElement","clientWidth","innerWidth","key","dispatchBreakpoint","breakPointKey","eventName","$","jQuery","$event","breakpoint","trigger","event","dispatchEvent","init","addEventListener","detectBreakpoint","getCurrentBreakpoint"],"mappings":";;;;;0LAAA,oBAEWA,EAAaC,EAAIC,OAClBC,EAAMC,SAASC,YAAY,sBACjCH,EAASA,GAAU,CAAEI,SAAS,EAAOC,YAAY,EAAOC,YAAQC,GAChEN,EAAIO,gBAAgBT,EAAIC,EAAOI,QAASJ,EAAOK,WAAYL,EAAOM,QAC3DL,EAGyB,mBAAvBQ,OAAOX,cAChBA,EAAYY,UAAYD,OAAOE,MAAMD,UACrCD,OAAOX,YAAcA,GAXzB,OCEMc,EAAc,CAClBC,OAAQ,CACNC,IAAK,EACLC,IAAK,KAEPC,MAAO,CACLF,IAAK,IACLC,IAAK,KAEPE,OAAQ,CACNH,IAAK,IACLC,IAAK,KAEPG,MAAO,CACLJ,IAAK,IACLC,IAAK,MAEPI,OAAQ,CACNL,IAAK,KACLC,IAAKK,EAAAA,IAILC,EAAoB,KAElBC,EACE,qBADFA,EAEC,oBAKDC,EAAoB,eAClBC,EAAcC,KAAKV,IAAIb,SAASwB,gBAAgBC,YAAalB,OAAOmB,YAAc,OAEnF,IAAMC,KAAOjB,KACZY,EAAcZ,EAAYiB,GAAKd,KAAOS,GAAeZ,EAAYiB,GAAKf,WACjEe,SAIJR,GAGHS,EAAqB,SAACC,EAAeC,eAAAA,IAAAA,EAAYV,GAC3B,OAAtBD,GAA8BA,IAAsBU,EAAe,CACrEV,EAAoBU,MACdE,EAjBcxB,OAAOwB,GAAKxB,OAAOyB,UAmBnCD,EAAG,KACCE,EAASF,EAAEtB,MAAMqB,EAAW,CAChCI,WAAYL,IAGdE,EAAExB,QAAQ4B,QAAQF,OACb,KACCG,EAAQ,IAAI7B,OAAOX,YAAYkC,EAAW,CAC9C1B,OAAQyB,IAGVtB,OAAO8B,cAAcD,YAKL,CACpBE,gBACEV,EAAmBP,IAAqBD,GAExCb,OAAOgC,iBAAiB,SAAU,WAChCX,EAAmBP,QAIvBmB,mCACErB,EAAoBE,KAItBoB,uCACStB"}