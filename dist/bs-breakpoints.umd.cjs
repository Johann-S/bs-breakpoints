(function(n,o){typeof exports=="object"&&typeof module<"u"?o(exports):typeof define=="function"&&define.amd?define(["exports"],o):(n=typeof globalThis<"u"?globalThis:n||self,o(n.bsBreakpoints={}))})(this,function(n){"use strict";const o={xSmall:{min:0,max:575},small:{min:576,max:767},medium:{min:768,max:991},large:{min:992,max:1199},xLarge:{min:1200,max:1399},xxLarge:{min:1400,max:1/0}};var a=(i=>(i.INIT="init.bs.breakpoint",i.NEW="new.bs.breakpoint",i))(a||{});const p=i=>i?window:{document:{documentElement:{}},addEventListener:()=>null,dispatchEvent:()=>!0,getComputedStyle:()=>({getPropertyValue:()=>""})};class u{window;breakPoints={...o};currentBreakpoint="medium";constructor(){this.window=p(typeof window<"u"),this.getBreakPoints(),this.getCurrentBreakpoint(),this.dispatchBreakpoint(a.INIT),window.addEventListener("resize",()=>{this.getCurrentBreakpoint(),this.dispatchBreakpoint(a.NEW)})}addBreakpoint(t,e){return this.breakPoints[t]=e,this.breakPoints}removeBreakpoint(t){return delete this.breakPoints[t],this.breakPoints}getBreakPoints(){const t=window.document.documentElement,e=parseInt(this.window.getComputedStyle(t).getPropertyValue("--bs-breakpoint-sm"),10),r=parseInt(this.window.getComputedStyle(t).getPropertyValue("--bs-breakpoint-md"),10),s=parseInt(this.window.getComputedStyle(t).getPropertyValue("--bs-breakpoint-lg"),10),m=parseInt(this.window.getComputedStyle(t).getPropertyValue("--bs-breakpoint-xl"),10),d=parseInt(this.window.getComputedStyle(t).getPropertyValue("--bs-breakpoint-xxl"),10);return this.breakPoints.xSmall.max=e-1,this.breakPoints.small.min=e,this.breakPoints.small.max=r-1,this.breakPoints.medium.min=r,this.breakPoints.medium.max=s-1,this.breakPoints.large.min=s,this.breakPoints.large.max=m-1,this.breakPoints.xLarge.min=m,this.breakPoints.xLarge.max=d-1,this.breakPoints.xxLarge.min=d,this.breakPoints}getCurrentBreakpoint(){const t=Math.max(this.window.document.documentElement.clientWidth,this.window.innerWidth||0),r=Object.keys(this.breakPoints).find(s=>t<=this.breakPoints[s].max&&t>=this.breakPoints[s].min);return r?(this.currentBreakpoint=r,r):this.currentBreakpoint}dispatchBreakpoint(t){const e=new CustomEvent(t,{detail:{breakpoint:this.currentBreakpoint}});this.window.dispatchEvent(e)}}n.BreakpointDetector=u,Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});
